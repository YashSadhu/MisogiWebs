"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Bell, BellRing, Calendar, Clock, Settings, Star } from "lucide-react"

interface NotificationCenterProps {
  upcomingDoses: any[]
}

export default function NotificationCenter({ upcomingDoses }: NotificationCenterProps) {
  const [showNotifications, setShowNotifications] = useState(false)
  const [notificationsEnabled, setNotificationsEnabled] = useState(false)
  const [permission, setPermission] = useState<NotificationPermission>("default")
  const [activeNotifications, setActiveNotifications] = useState<Set<string>>(new Set())

  useEffect(() => {
    // Check notification permission on mount
    if ("Notification" in window) {
      setPermission(Notification.permission)
      setNotificationsEnabled(Notification.permission === "granted")
    }
  }, [])

  // Enhanced notification scheduling with better timing
  useEffect(() => {
    if (!notificationsEnabled) return

    const scheduleNotifications = () => {
      upcomingDoses.forEach((dose) => {
        const doseTime = new Date(dose.scheduledTime).getTime()
        const now = new Date().getTime()

        // Schedule notification 15 minutes before dose time
        const reminderTime = doseTime - 15 * 60 * 1000
        const timeUntilReminder = reminderTime - now

        // Schedule dose time notification
        const timeUntilDose = doseTime - now

        if (timeUntilReminder > 0 && timeUntilReminder <= 24 * 60 * 60 * 1000) {
          setTimeout(() => {
            if (!activeNotifications.has(`reminder-${dose.medicationId}`)) {
              new Notification(`Upcoming: ${dose.medicationName}`, {
                body: `Take ${dose.dosage} in 15 minutes`,
                icon: "/placeholder.svg?height=64&width=64",
                tag: `reminder-${dose.medicationId}`,
              })
              setActiveNotifications((prev) => new Set(prev).add(`reminder-${dose.medicationId}`))
            }
          }, timeUntilReminder)
        }

        if (timeUntilDose > 0 && timeUntilDose <= 24 * 60 * 60 * 1000) {
          setTimeout(() => {
            if (!activeNotifications.has(`dose-${dose.medicationId}`)) {
              new Notification(`Time for ${dose.medicationName}! 💊`, {
                body: `Take ${dose.dosage} now. Earn points for on-time logging!`,
                icon: "/placeholder.svg?height=64&width=64",
                tag: `dose-${dose.medicationId}`,
                requireInteraction: true,
              })
              setActiveNotifications((prev) => new Set(prev).add(`dose-${dose.medicationId}`))
            }
          }, timeUntilDose)
        }
      })
    }

    scheduleNotifications()
  }, [upcomingDoses, notificationsEnabled, activeNotifications])

  const requestNotificationPermission = async () => {
    if ("Notification" in window) {
      const permission = await Notification.requestPermission()
      setPermission(permission)
      setNotificationsEnabled(permission === "granted")

      if (permission === "granted") {
        new Notification("MedTrack Notifications Enabled! 🎉", {
          body: "You'll receive reminders for upcoming doses and earn points for timely logging",
          icon: "/placeholder.svg?height=64&width=64",
        })
      }
    }
  }

  const addToGoogleCalendar = (dose: any) => {
    const startTime = new Date(dose.scheduledTime)
    const endTime = new Date(startTime.getTime() + 15 * 60000)

    const event = {
      title: `💊 Take ${dose.medicationName}`,
      start: startTime.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z",
      end: endTime.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z",
      description: `Medication: ${dose.medicationName}\nDosage: ${dose.dosage}\n\n🏆 Log on time to earn bonus points!\n\nGenerated by MedTrack`,
    }

    const googleCalendarUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(event.title)}&dates=${event.start}/${event.end}&details=${encodeURIComponent(event.description)}`
    window.open(googleCalendarUrl, "_blank")
  }

  const urgentDoses = upcomingDoses.filter((dose) => dose.timeUntil <= 30 * 60 * 1000)
  const hasUrgentDoses = urgentDoses.length > 0

  return (
    <div className="relative">
      <Button
        variant="outline"
        size="icon"
        onClick={() => setShowNotifications(!showNotifications)}
        className={hasUrgentDoses ? "animate-pulse border-red-500" : ""}
      >
        {hasUrgentDoses ? <BellRing className="w-4 h-4 text-red-500" /> : <Bell className="w-4 h-4" />}
        {upcomingDoses.length > 0 && (
          <Badge className="absolute -top-2 -right-2 h-5 w-5 p-0 text-xs">{upcomingDoses.length}</Badge>
        )}
      </Button>

      {showNotifications && (
        <div className="absolute right-0 top-12 w-80 z-50">
          <Card className="shadow-lg border-2">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">Smart Reminders</CardTitle>
                <Button variant="ghost" size="sm" onClick={() => setShowNotifications(false)}>
                  ×
                </Button>
              </div>
              <CardDescription>Intelligent medication notifications</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Enhanced Notification Settings */}
              <div className="p-3 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium">Smart Notifications</span>
                  <Badge variant={notificationsEnabled ? "default" : "secondary"}>
                    {notificationsEnabled ? "Active" : "Disabled"}
                  </Badge>
                </div>
                <p className="text-xs text-gray-600 mb-2">Get reminders 15 minutes before and at dose time</p>
                {!notificationsEnabled && (
                  <Button size="sm" onClick={requestNotificationPermission} className="w-full">
                    <Settings className="w-3 h-3 mr-2" />
                    Enable Smart Reminders
                  </Button>
                )}
              </div>

              {/* Upcoming Doses with Enhanced Info */}
              {upcomingDoses.length > 0 ? (
                <div className="space-y-3">
                  <h4 className="font-medium text-sm flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    Upcoming Doses
                  </h4>
                  {upcomingDoses.slice(0, 5).map((dose, index) => {
                    const isUrgent = dose.timeUntil <= 30 * 60 * 1000
                    const isVeryUrgent = dose.timeUntil <= 5 * 60 * 1000
                    const hours = Math.floor(dose.timeUntil / (1000 * 60 * 60))
                    const minutes = Math.floor((dose.timeUntil % (1000 * 60 * 60)) / (1000 * 60))

                    return (
                      <div
                        key={index}
                        className={`p-3 rounded-lg border ${
                          isVeryUrgent
                            ? "border-red-300 bg-red-50 animate-pulse"
                            : isUrgent
                              ? "border-orange-200 bg-orange-50"
                              : "border-gray-200 bg-white"
                        }`}
                      >
                        <div className="flex items-start justify-between mb-2">
                          <div>
                            <p className="font-medium text-sm">{dose.medicationName}</p>
                            <p className="text-xs text-gray-600">{dose.dosage}</p>
                          </div>
                          <div className="flex flex-col items-end gap-1">
                            {isVeryUrgent && (
                              <Badge variant="destructive" className="text-xs animate-pulse">
                                Now!
                              </Badge>
                            )}
                            {isUrgent && !isVeryUrgent && (
                              <Badge variant="destructive" className="text-xs">
                                Soon
                              </Badge>
                            )}
                          </div>
                        </div>

                        <div className="flex items-center gap-2 text-xs text-gray-500 mb-3">
                          <Clock className="w-3 h-3" />
                          <span>
                            {new Date(dose.scheduledTime).toLocaleTimeString([], {
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </span>
                          <span>
                            ({hours > 0 ? `${hours}h ` : ""}
                            {minutes}m)
                          </span>
                        </div>

                        {/* Points incentive */}
                        <div className="flex items-center gap-1 mb-2 text-xs text-yellow-600">
                          <Star className="w-3 h-3" />
                          <span>Earn 15 points for on-time logging</span>
                        </div>

                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => addToGoogleCalendar(dose)}
                            className="flex-1 text-xs"
                          >
                            <Calendar className="w-3 h-3 mr-1" />
                            Add to Calendar
                          </Button>
                        </div>
                      </div>
                    )
                  })}
                </div>
              ) : (
                <div className="text-center py-6">
                  <Bell className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-500">No upcoming doses</p>
                  <p className="text-xs text-gray-400">You're all caught up!</p>
                </div>
              )}

              {/* Quick Actions */}
              <div className="border-t pt-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    upcomingDoses.forEach((dose) => {
                      const doseTime = new Date(dose.scheduledTime).getTime()
                      const now = new Date().getTime()
                      const timeUntil = doseTime - now

                      if (timeUntil > 0 && timeUntil <= 4 * 60 * 60 * 1000) {
                        // Next 4 hours
                        setTimeout(() => {
                          new Notification(`Time for ${dose.medicationName}! 💊`, {
                            body: `Take ${dose.dosage} now. Earn points for logging!`,
                            icon: "/placeholder.svg?height=64&width=64",
                            requireInteraction: true,
                          })
                        }, timeUntil)
                      }
                    })
                    alert(
                      `Scheduled ${upcomingDoses.filter((d) => d.timeUntil <= 4 * 60 * 60 * 1000).length} smart reminders`,
                    )
                  }}
                  disabled={!notificationsEnabled || upcomingDoses.length === 0}
                  className="w-full"
                >
                  <Bell className="w-3 h-3 mr-2" />
                  Schedule Smart Reminders
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
